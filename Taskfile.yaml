version: '3'
env:
    DOCKER_PASSWORD: 5@fs@i@58Zp6wfiH
    REPO_PROJECT: worpdress-279321
    REPO: '{{if .BUILD_ID }}gcr.io/{{.REPO_PROJECT}}/{{end}}'
    BRANCH:
        sh: git branch --show-current
    REVISION_ID:
        sh: git rev-parse HEAD

tasks:
    init:
        internal: true
        run: once
        cmds:
            - cmd:
                '{{if .BUILD_ID }}
                    echo {{.DOCKER_PASSWORD}} | docker login --username eelis --password-stdin;
                    docker login gcr.io
                {{else}}
                    pgrep docker > /dev/null || sudo service docker start
                {{end}}'

    build:
        internal: true
        cmds:
            # pull an image to --cache-from
            - cmd: '{{if .BUILD_ID }} docker pull -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest{{end}}'
              ignore_errors: true

            - docker build
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                --cache-from {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                {{.IMAGE}}

    run:
        internal: true
        cmds:
            - docker run --network host --env-file common/env/{{.ENV_FILE}}.txt {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest {{.ARGS}}


    build-backend:
        deps: [init]
        run: once
        cmds:
            - task: build
              vars:
                IMAGE: backend

    build-frontend:
        deps: [init]
        run: once
        cmds:
            - task: build
              vars:
                IMAGE: frontend

    start-test-servers:
        deps: [init]
        run: once
        cmds:
            - '{{if .BUILD_ID }} docker compose pull -q{{end}}'
            - docker compose build
            - '{{if .BUILD_ID }} docker compose push {{end}}'
            - docker compose up --detach


    unittests-frontend:
        run: once
        deps:  [init, build-frontend]
        cmds:
            - task: run
              vars:
                IMAGE: frontend
                ENV_FILE: testing
                ARGS: yarn test

    unittests-backend:
        run: once
        deps: [init, start-test-servers, build-backend]
        cmds:
            - task: run
              vars:
                IMAGE: backend
                ENV_FILE: testing
                ARGS: run python -m unittest

    unittests:
        run: once
        deps: [init, unittests-backend, unittests-frontend]

    end2end-tests:
        run: once
        deps: [init, build-frontend, build-backend, start-test-servers]
        cmds:
            - defer: docker compose logs -t
            - task: run
              vars:
                IMAGE: backend
                ENV_FILE: testing
                ARGS: run main -c -e
            - task: run
              vars:
                IMAGE: frontend
                ENV_FILE: testing
                ARGS: yarn generate


    generate:
        run: once
        deps: [init, build-frontend, build-backend]
        cmds:
            - docker run
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main -c
            - rm -fr dist/
            - docker run
                -v $(pwd)/frontend/dist/:/app/dist
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn generate

            - docker run
                -e GOOGLE_APPLICATION_CREDENTIALS=backend/videosdb/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}firebase deploy
                --project {{.FIREBASE_PROJECT}}
                --only=hosting

    generate-test:
        deps: [start-test-servers]
        cmds:
            - task: generate
              vars:
                VIDEOSDB_CONFIG: testing


    push:
        deps: [init]
        internal: true
        cmds:
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest


    push-frontend:
        deps: [build-frontend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: frontend


    push-backend:
        deps: [build-backend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: backend



# cloud build trigger tasks. Task names must match with the trigger names in the GCP console

    backend-master:
        deps: [init]
        cmds:
            - task: build-backend
            - task: unittests-backend
            - task: push-backend

    backend-prod:
        deps: [init]
        cmds:
            - task: build-backend
            - task: unittests-backend
            - task: end2end-tests
            - task: push-backend

    frontend-master:
        deps: [init]
        cmds:
            - task: build-frontend
            - task: unittests-frontend
            - task: push-frontend

    frontend-prod:
        deps: [init]
        cmds:
            - task: build-frontend
            - task: unittests-frontend
            - task: end2end-tests
            - task: push-frontend

    tests-end2end-master:
        cmds:
            - task: end2end-tests

    tests-end2end-prod:
        cmds:
            - task: end2end-tests

    generate-testing:
        cmds:
            - task: generate
              vars:
                VIDEOSDB_CONFIG: testing-cloudbuild
                FIREBASE_PROJECT: videosdb-testing

    generate-sadhguru:
        cmds:
            - task: generate
              vars:
                VIDEOSDB_CONFIG: sadhguru
                FIREBASE_PROJECT: videosdb-firebase

    generate-nithyananda:
        cmds:
            - task: generate
              vars:
                VIDEOSDB_CONFIG: nithyananda
                FIREBASE_PROJECT: videosdb-nithyananda


version: '3'
env:
    DOCKER_PASSWORD: 5@fs@i@58Zp6wfiH
    REPO_PROJECT: worpdress-279321
    REPO: '{{if empty .BUILD_ID }}{{else}}gcr.io/{{.REPO_PROJECT}}/{{.BRANCH_NAME}}/{{end}}'
    TEST_SERVERS: firebase-emulator json-caching-proxy
tasks:
    init-local:
        cmds:
            - pgrep docker > /dev/null || sudo service docker start

    init-gcp:
        cmds:
            - echo $DOCKER_PASSWORD | docker login --username eelis --password-stdin

    echo-repo: echo {{.REPO}}


    backend: docker compose build --pull backend

    frontend: docker compose build --pull frontend

    firebase: docker compose build --pull firebase

    start-test-servers:
        cmds:
            - docker compose  build --pull $TEST_SERVERS
            - docker compose up --detach $TEST_SERVERS


    unittests-frontend:
        run: once
        deps:  [frontend]
        cmds:
            - docker compose run frontend yarn test

    unittests-backend:
        run: once
        deps:  [start-test-servers, backend]
        cmds:
            - docker compose run
                -e FIRESTORE_EMULATOR_HOST=localhost:8080
                backend run python -m unittest

    unittests:
        run: once
        deps: [unittests-backend, unittests-frontend]

    end2end-tests:
        run: once
        deps: [frontend, backend, start-test-servers]
        cmds:
            - task: start-test-servers
            - docker compose run backend run main -c -e
            - docker compose run frontend yarn generate


    generate:
        run: once
        deps: [frontend, backend, firebase]
        cmds:
            - docker compose run backend run main --check-for-new-videos
            - docker compose run --name generate frontend yarn generate
            - docker cp generate:/app/dist frontend/
            - docker compose run
                -e GOOGLE_APPLICATION_CREDENTIALS=backend/videosdb/keys/$VIDEOSDB_CONFIG.json
                firebase deploy
                --project ${FIREBASE_PROJECT}
                --only=hosting

    push-frontend:
        run: once
        preconditions:
            - .REPO
        cmds:
             - docker compose push frontend


    push-backend:
        run: once
        preconditions:
            - .REPO
        cmds:
             - docker compose push backend




version: '3'
env:
    DOCKER_PASSWORD: 5@fs@i@58Zp6wfiH
    REPO_PROJECT: worpdress-279321
    REPO: '{{if .BUILD_ID }}gcr.io/{{.REPO_PROJECT}}/{{end}}'
    FIRESTORE_EMULATOR_HOST: 127.0.0.1:46456
    YOUTUBE_API_URL: http://127.0.0.1:43783/youtube/v3
    BRANCH:
        sh: git branch --show-current
    REVISION_ID:
        sh: git rev-parse HEAD

output: prefixed

tasks:
    init:
        internal: true
        run: once
        cmds:
            - cmd:
                '{{if .BUILD_ID }}
                    echo {{.DOCKER_PASSWORD}} | docker login --username eelis --password-stdin;
                    docker login gcr.io
                {{else}}
                    pgrep docker > /dev/null || sudo service docker start
                {{end}}'

    build:
        internal: true
        cmds:
            # pull an image to --cache-from
            - cmd: '{{if .BUILD_ID }} docker pull -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest{{end}}'
              ignore_errors: true

            - docker build
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                --cache-from {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                {{.IMAGE}}


    run:
        internal: true
        cmds:
            - docker run --rm
                --network host {{.PROCESSED_ENVS}}
                --env-file common/env/{{.ENV_FILE}}.txt
                {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest {{.ARGS}}
        vars:
            PROCESSED_ENVS:
                sh: for v in {{.ENVS}}; do echo -n "-e $v "; done

    wait-for-emulator:
        internal: true
        cmds:
            - docker run --rm --network host busybox
                sh -c '
                    until nc -z localhost {{.FIRESTORE_EMULATOR_PORT}};
                        do echo "waiting for emulator...";
                        sleep 1;
                    done'
        vars:
            FIRESTORE_EMULATOR_PORT:
                sh: echo {{.FIRESTORE_EMULATOR_HOST}} | cut -d ":" -f 2


    build-backend:
        deps: [init]
        run: once
        cmds:
            - cp -r common backend
            - task: build
              vars:
                IMAGE: backend

    build-frontend:
        deps: [init]
        run: once
        cmds:
            - cp -r common frontend
            # firebase command needs this file here:
            - cp common/firebase/firebase.json frontend
            - task: build
              vars:
                IMAGE: frontend

    build-all:
        deps: [build-frontend, build-backend]

    start-test-servers:
        deps: [init]
        run: once
        cmds:
            - '{{if .BUILD_ID }}
                    docker compose pull -q
                {{else}}
                    docker compose build
                {{end}}'
            - docker compose up --detach
            - task: wait-for-emulator

    stop-test-servers: docker compose down

    unittests-frontend:
        run: once
        deps:  [init, build-frontend]
        cmds:
            - task: run
              vars:
                IMAGE: frontend
                ENV_FILE: testing
                ARGS: yarn test

    unittests-backend:
        run: once
        deps: [init, start-test-servers, build-backend]
        cmds:
            - task: run
              vars:
                IMAGE: backend
                ENV_FILE: testing
                ARGS: run sh -c "coverage run -m unittest && coverage report -m && coverage html"
                ENVS:
                    LOGLEVEL=DEBUG
                    DEBUG=1
                    PYTHONDEVMODE=1
                    FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}ยบ

    unittests:
        run: once
        deps: [init, unittests-backend, unittests-frontend]

    end2end-tests:
        run: once
        deps: [init, build-frontend, build-backend, start-test-servers]
        cmds:
            - defer: docker compose logs -t
            - task: run
              vars:
                IMAGE: backend
                ENV_FILE: testing
                ARGS: run main -c -e
                ENVS:
                    LOGLEVEL=DEBUG
                    DEBUG=1
                    PYTHONDEVMODE=1
                    FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                    YOUTUBE_API_URL={{.YOUTUBE_API_URL}}

            - task: run
              vars:
                IMAGE: frontend
                ENV_FILE: testing
                ARGS: '{{if .BUILD_ID }}
                            yarn generate
                        {{else}}
                            yarn run-s generate start
                        {{end}}'
                ENVS:
                    FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}


    deploy-test:
        run: once
        deps: [init, build-frontend, build-backend, start-test-servers]
        cmds:
            - docker run --network host
                -e YOUTUBE_API_URL={{.YOUTUBE_API_URL}}
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main -c -e

            - docker run --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn run-s generate deploy

    generate:
        run: once
        deps: [init, build-frontend, build-backend]
        cmds:
            - docker run --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main -c
            - docker run --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn run-s generate deploy


    push:
        deps: [init]
        internal: true
        cmds:
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest


    push-frontend:
        deps: [build-frontend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: frontend


    push-backend:
        deps: [build-backend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: backend

    build-and-push-test-servers:
        deps: [init]
        run: once
        cmds:
            - REPO={{.REPO}} docker compose build
            - docker login gcr.io
            - REPO={{.REPO}} docker compose push
        vars:
            REPO: gcr.io/{{.REPO_PROJECT}}/


    default:
        - task: build-all
        - task: unittests
        - task: end2end-tests

# cloud build trigger tasks. Task names must match with the trigger names in the GCP console

    backend-master:
        - task: build-backend
        - task: unittests-backend
        - task: push-backend

    backend-prod:
        - task: build-backend
        - task: unittests-backend
        - task: end2end-tests
        - task: push-backend

    frontend-master:
        - task: build-frontend
        - task: unittests-frontend
        - task: push-frontend

    frontend-prod:
        - task: build-frontend
        - task: unittests-frontend
        - task: end2end-tests
        - task: push-frontend

    tests-end2end-master:
        - task: end2end-tests

    tests-end2end-prod:
        - task: end2end-tests

    generate-testing:
        - task: generate
          vars:
            VIDEOSDB_CONFIG: testing
            FIREBASE_PROJECT: videosdb-testing

    generate-sadhguru:
        - task: generate
          vars:
            VIDEOSDB_CONFIG: sadhguru
            FIREBASE_PROJECT: videosdb-firebase

    generate-nithyananda:
        - task: generate
          vars:
            VIDEOSDB_CONFIG: nithyananda
            FIREBASE_PROJECT: videosdb-nithyananda


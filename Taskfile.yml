version: '3'
env:
    DOCKER_PASSWORD: 5@fs@i@58Zp6wfiH
    MAIN_PROJECT: worpdress-279321
    REGISTRY: us-central1-docker.pkg.dev/{{.MAIN_PROJECT}}/registry/
    REPO: '{{if .BUILD_ID }}{{.REGISTRY}}{{end}}'
    FIRESTORE_EMULATOR: 127.0.0.1:46456
    YOUTUBE_API_URL: http://127.0.0.1:43783/youtube/v3
    REVISION_ID:
        sh: echo ${REVISION_ID:-$(git rev-parse HEAD)}
    TEST_SERVERS: json-caching-proxy firebase-emulator
    BRANCH_NAME:
        sh: echo ${BRANCH_NAME:-$(git branch --show-current)}

output: prefixed

tasks:
    init-gcp:
        run: once
        cmds:
            - env
            - echo {{.DOCKER_PASSWORD}} | docker login --username eelis --password-stdin;
            - gcloud auth activate-service-account --key-file common/keys/{{.MAIN_PROJECT}}.json;
            - gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
            # - git clone --depth 1 git@github.com:kovan/videosdb
            # - git checkout $BRANCH_NAME

    build:
        internal: true
        cmds:
            - date
            # pull the image for --cache-from
            - cmd: '{{if .BUILD_ID }} docker pull -q {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:latest{{end}}'
              ignore_error: true

            - docker build
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:{{.REVISION_ID}}
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:latest
                --cache-from {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:latest
                {{.IMAGE}}


    wait-for-port:
        internal: true
        cmds:
            - docker run --rm --network host busybox
                sh -c '
                    until nc -z {{.HOST}} {{.PORT}};
                        do echo "waiting for port {{.PORT}} on host {{.HOST}} ...";
                        sleep 2;
                    done'

    build-backend:
        run: once
        cmds:
            - cp -r common backend
            - task: build
              vars:
                IMAGE: backend

    build-frontend:
        run: once
        cmds:
            - cp -r common frontend
            # firebase command needs this file here:
            - cp common/firebase/firebase.json frontend
            - task: build
              vars:
                IMAGE: frontend

    build-all:
        deps: [build-frontend, build-backend]

    wait-for-redis:
        cmds:
            - task: wait-for-port
              vars:
                HOST: 127.0.0.1
                PORT: 6379

    wait-for-emulator:
        cmds:
            - task: wait-for-port
              vars:
                HOST:
                    sh: echo {{.FIRESTORE_EMULATOR}} | cut -d ":" -f 1
                PORT:
                    sh: echo {{.FIRESTORE_EMULATOR}} | cut -d ":" -f 2


    start-servers:
        run: once
        cmds:
            - date
            - '{{if .BUILD_ID }}
                    docker compose pull -q
                {{else}}
                    docker compose build
                {{end}}'
            - docker compose restart
            - docker compose up --detach --no-build
            - task: wait-for-redis
            - task: wait-for-emulator

    stop-servers: docker compose down

    unittests-frontend:
        run: once
        deps:  [build-frontend]
        cmds:
            - date
            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                {{.REPO}}frontend-{{.BRANCH_NAME}}:latest
                yarn test



    unittests-backend:
        run: once
        deps: [build-backend, start-servers]
        cmds:
            - date
            - rm -f {{.CID_FILE}}
            - docker run
                --cidfile {{.CID_FILE}}
                --network host
                --env-file common/env/testing.txt
                -e LOGLEVEL=DEBUG
                -e DEBUG=1
                -e PYTHONDEVMODE=1
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR}}
                {{.REPO}}backend-{{.BRANCH_NAME}}:latest
                run sh -c "coverage run -m unittest && coverage report -m && coverage html"
            - defer: docker rm $(cat {{.CID_FILE}})
            - docker cp $(cat {{.CID_FILE}}):/app/htmlcov .
        vars:
            CID_FILE: /tmp/unittests-backend.cid

    unittests:
        run: once
        deps: [unittests-backend, unittests-frontend]

    end2end-tests:
        run: once
        deps: [build-frontend, build-backend, start-servers]
        cmds:
            - date
            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                -e LOGLEVEL=DEBUG
                -e DEBUG=1
                -e PYTHONDEVMODE=1
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR}}
                -e YOUTUBE_API_URL={{.YOUTUBE_API_URL}}
                -e YOUTUBE_CHANNEL_ID=UCcYzLCs3zrQIBVHYA1sK2sw
                {{.REPO}}backend-{{.BRANCH_NAME}}:latest
                run main -c

            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR}}
                {{.REPO}}frontend-{{.BRANCH_NAME}}:latest
                yarn run-s generate {{if .START_DEV_SERVER}}start{{end}}

    tail-servers-logs: (docker compose logs -f -t --no-color | grep -v "Detected non-HTTP/2 connection"  | grep -v HttpVersionRoutingHandler ) &

    download-cache:
        cmds:
            - gsutil cp gs://httpx-cache-{{.VIDEOSDB_CONFIG}}/dump.rdb.gz .
            - gunzip -f dump.rdb.gz


    upload-cache:
        cmds:
            - gzip -f --keep dump.rdb
            - gsutil cp dump.rdb.gz gs://httpx-cache-{{.VIDEOSDB_CONFIG}}/
            - rm -f dump.rdb.gz


    run-backend:
        run: once
        cmds:
            - date
            - docker compose up  redis -d
            - docker compose stop redis
            - docker compose cp dump.rdb redis:/data
            - docker compose up -d --force-recreate --no-build
            - defer: docker compose stop redis && docker compose cp redis:/data/dump.rdb .
            - task: wait-for-redis
            - task: wait-for-emulator
            - task: tail-servers-logs
            - docker run --rm
                --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{if .LOGLEVEL}} -e LOGLEVEL={{.LOGLEVEL}} {{end}}
                {{.REPO}}backend-{{.BRANCH_NAME}}:latest
                run main
                    --check-for-new-videos
                    --enable-transcripts
                    --enable-twitter-publishing
                    --export-to-emulator-host {{.FIRESTORE_EMULATOR}}



    run-frontend:
        run: once
        cmds:
            - date
            - docker run --rm
                --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR}}
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}frontend-{{.BRANCH_NAME}}:latest
                yarn run-s generate deploy



    generate-with-cache:
        deps: [download-cache]
        cmds:
            - defer: {task: upload-cache}
            - task: generate



    generate:
        cmds:
            - task: run-backend
            - task: run-frontend



    push:
        internal: true
        cmds:
            - date
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:{{.REVISION_ID}}
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH_NAME}}:latest


    push-frontend:
        deps: [build-frontend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: frontend


    push-backend:
        deps: [build-backend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: backend

    build-and-push-other-images:
        deps: [init-gcp]
        run: once
        cmds:
            - REPO={{.REGISTRY}} docker compose build {{.TEST_SERVERS}}
            - REPO={{.REGISTRY}} docker compose push {{.TEST_SERVERS}}
            - docker build utils/builder -t {{.REGISTRY}}videosdb-builder
            - docker push {{.REGISTRY}}videosdb-builder

    deploy-only-nithyananda:
        deps: [init-gcp]
        cmds:
            - docker pull {{.REGISTRY}}frontend-{{.BRANCH_NAME}}:latest
            - docker run --rm
                --env-file common/env/nithyananda.txt
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/nithyananda.json
                {{.REGISTRY}}frontend-{{.BRANCH_NAME}}:latest
                yarn run-s generate deploy

    test:
        deps: [unittests, end2end-tests]

    default:
        deps: [build-all, unittests, end2end-tests]
        cmds:
            - defer: env

# local-only, non-docker commands:

    local-run:
        - task: tail-servers-logs
        - task: local-run-backend
        - task: local-run-frontend

    local-run-backend:
        cd backend &&
        LOGLEVEL=DEBUG
        DEBUG=1
        YOUTUBE_API_URL=http://127.0.0.1:43783/youtube/v3
        FIRESTORE_EMULATOR_HOST=localhost:46456
        poetry run main -c --dotenv ../common/env/testing.txt; cd ..

    local-run-frontend:
        cd frontend &&
        FIRESTORE_EMULATOR_HOST=localhost:46456
        yarn generate --dotenv ../common/env/testing.txt &&
        yarn start    --dotenv ../common/env/testing.txt; cd ..

    local-dev-frontend:
        cd frontend &&
        FIRESTORE_EMULATOR_HOST=localhost:46456
        yarn dev -t static --dotenv ../common/env/testing.txt; cd ..

    local-ipython-shell: backend/utils/ipythonshell.sh

    local-firebase-emulator: cd common/firebase && firebase use default && firebase emulators:start; cd ../..

    local-push-to-prod: git checkout prod && git merge master && git push && git checkout master



# cloud build trigger tasks. Task names must match with the trigger names in the GCP console

    backend-master:
        deps: [build-backend, unittests-backend]
        cmds:
            - task: push-backend

    backend-prod:
        deps: [build-backend, unittests-backend, end2end-tests]
        cmds:
            - task: push-backend

    frontend-master:
        deps: [build-frontend, unittests-frontend]
        cmds:
            - task: push-frontend

    frontend-prod:
        deps: [build-frontend, unittests-frontend, end2end-tests]
        cmds:
            - task: push-frontend

    tests-end2end-master:
        cmds:
            - task: end2end-tests

    tests-end2end-prod:
        cmds:
            - task: end2end-tests

    generate-testing:
        cmds:
            - task: generate-with-cache
        preconditions:
            - test {{.VIDEOSDB_CONFIG}}

    generate-sadhguru:
        cmds:
            - task: generate-with-cache
        preconditions:
            - test {{.VIDEOSDB_CONFIG}}

    generate-nithyananda:
        cmds:
            - task: generate-with-cache
        preconditions:
            - test {{.VIDEOSDB_CONFIG}}



version: '3'
env:
    DOCKER_PASSWORD: 5@fs@i@58Zp6wfiH
    REPO_PROJECT: worpdress-279321
    REPO: '{{if .BUILD_ID }}gcr.io/{{.REPO_PROJECT}}/{{end}}'
    FIRESTORE_EMULATOR_HOST: 127.0.0.1:46456
    YOUTUBE_API_URL: http://127.0.0.1:43783/youtube/v3
    BRANCH:
        sh: git branch --show-current
    REVISION_ID:
        sh: git rev-parse HEAD
    TEST_SERVERS: json-caching-proxy firebase-emulator

output: prefixed

tasks:
    init:
        internal: true
        run: once
        cmds:
            - cmd:
                '{{if .BUILD_ID }}
                    echo {{.DOCKER_PASSWORD}} | docker login --username eelis --password-stdin;
                    docker login gcr.io
                {{else}}
                    pgrep docker > /dev/null || sudo service docker start
                {{end}}'

    build:
        internal: true
        cmds:
            # pull the image for --cache-from
            - cmd: '{{if .BUILD_ID }} docker pull -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest{{end}}'
              ignore_errors: true

            - docker build
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
                -t {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                --cache-from {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest
                {{.IMAGE}}


    wait-for-port:
        internal: true
        cmds:
            - docker run --rm --network host busybox
                sh -c '
                    until nc -z {{.HOST}} {{.PORT}};
                        do echo "waiting for port {{.PORT}} on host {{.HOST}} ...";
                        sleep 2;
                    done'

    build-backend:
        deps: [init]
        run: once
        cmds:
            - cp -r common backend
            - task: build
              vars:
                IMAGE: backend

    build-frontend:
        deps: [init]
        run: once
        cmds:
            - cp -r common frontend
            # firebase command needs this file here:
            - cp common/firebase/firebase.json frontend
            - task: build
              vars:
                IMAGE: frontend

    build-all:
        deps: [build-frontend, build-backend]

    wait-for-redis:
        cmds:
            - task: wait-for-port
              vars:
                HOST: 127.0.0.1
                PORT: 6379

    wait-for-emulator:
        cmds:
            - task: wait-for-port
              vars:
                HOST:
                    sh: echo {{.FIRESTORE_EMULATOR_HOST}} | cut -d ":" -f 1
                PORT:
                    sh: echo {{.FIRESTORE_EMULATOR_HOST}} | cut -d ":" -f 2


    start-servers:
        deps: [init]
        run: once
        cmds:
            - '{{if .BUILD_ID }}
                    docker compose pull -q
                {{else}}
                    docker compose build
                {{end}}'
            - docker compose up --detach
            - task: wait-for-redis
            - task: wait-for-emulator

    stop-servers: docker compose down

    unittests-frontend:
        run: once
        deps:  [init, build-frontend]
        cmds:
            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn test


    unittests-backend:
        run: once
        deps: [init, build-backend, start-servers]
        cmds:
            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                -e LOGLEVEL=DEBUG
                -e DEBUG=1
                -e PYTHONDEVMODE=1
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                {{.REPO}}backend-{{.BRANCH}}:latest
                run sh -c "coverage run -m unittest && coverage report -m && coverage html"


    unittests:
        run: once
        deps: [init, unittests-backend, unittests-frontend]

    end2end-tests:
        silent: true
        run: once
        deps: [init, build-frontend, build-backend, start-servers]
        cmds:
            - defer: docker compose logs
            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                -e LOGLEVEL=DEBUG
                -e DEBUG=1
                -e PYTHONDEVMODE=1
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                -e YOUTUBE_API_URL={{.YOUTUBE_API_URL}}
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main -c -e

            - docker run --rm
                --network host
                --env-file common/env/testing.txt
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                {{.REPO}}frontend-{{.BRANCH}}:latest
                {{if .BUILD_ID }}
                    yarn generate
                {{else}}
                    yarn run-s generate start
                {{end}}


    deploy-test:
        run: once
        deps: [init, build-frontend, build-backend, start-servers]
        cmds:
            - docker run
                --network host
                -e YOUTUBE_API_URL={{.YOUTUBE_API_URL}}
                -e FIRESTORE_EMULATOR_HOST={{.FIRESTORE_EMULATOR_HOST}}
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main -c -e

            - docker run
                --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn run-s generate deploy

    download-cache:
        deps: [init]
        cmds:
            - docker run
                --name gcloud
                -v $(pwd)/common/keys:/keys
                google/cloud-sdk:alpine
                gcloud auth activate-service-account --key-file /keys/{{.VIDEOSDB_CONFIG}}.json
            - defer: docker rm gcloud
            - docker run --rm
                --volumes-from gcloud
                --mount type=bind,src=$(pwd),dst=/app
                google/cloud-sdk:alpine
                gsutil cp gs://httpx-cache-{{.VIDEOSDB_CONFIG}}/dump.rdb.gz /app
            - gunzip -f dump.rdb.gz

    upload-cache:
        deps: [init]
        cmds:
            - gzip --keep dump.rdb
            - docker run
                --name gcloud
                -v $(pwd)/common/keys:/keys
                google/cloud-sdk:alpine
                gcloud auth activate-service-account --key-file /keys/{{.VIDEOSDB_CONFIG}}.json
            - defer: docker rm gcloud
            - docker run --rm
                --volumes-from gcloud
                --mount type=bind,src=$(pwd),dst=/app
                google/cloud-sdk:alpine
                gsutil cp /app/dump.rdb.gz gs://httpx-cache-{{.VIDEOSDB_CONFIG}}/
            - rm -f dump.rdb.gz



    run-backend:
        run: once
        deps: [init, build-backend]
        cmds:
            - docker compose up redis -d
            - task: wait-for-redis
            - defer: docker compose stop redis && docker compose cp redis:/data/dump.rdb .
            - docker run --rm
                --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                {{if .LOGLEVEL}} -e LOGLEVEL={{.LOGLEVEL}} {{end}}
                {{.REPO}}backend-{{.BRANCH}}:latest
                run main
                    --check-for-new-videos
                    --enable-twitter-publishing



    run-frontend:
        run: once
        deps: [init, build-frontend]
        cmds:
            - docker run --rm
                --network host
                --env-file common/env/{{.VIDEOSDB_CONFIG}}.txt
                -e GOOGLE_APPLICATION_CREDENTIALS=common/keys/{{.VIDEOSDB_CONFIG}}.json
                {{.REPO}}frontend-{{.BRANCH}}:latest
                yarn run-s generate deploy


    generate-gcp:
        deps: [init,  build-all, unittests, end2end-tests, download-cache]
        cmds:
            - task: run-backend
            - task: upload-cache
            - task: run-frontend


    generate:
        deps: [init, build-all, unittests, end2end-tests]
        cmds:
            - task: run-backend
            - task: run-frontend



    push:
        deps: [init]
        internal: true
        cmds:
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:{{.REVISION_ID}}
            - docker push -q {{.REPO}}{{.IMAGE}}-{{.BRANCH}}:latest


    push-frontend:
        deps: [build-frontend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: frontend


    push-backend:
        deps: [build-backend]
        run: once
        cmds:
            - task: push
              vars:
                IMAGE: backend

    build-and-push-test-servers:
        deps: [init]
        run: once
        cmds:
            - REPO={{.REPO}} docker compose build {{.TEST_SERVERS}}
            - docker login gcr.io
            - REPO={{.REPO}} docker compose push {{.TEST_SERVERS}}
        vars:
            REPO: gcr.io/{{.REPO_PROJECT}}/


    default:
        deps: [init, build-all, unittests, end2end-tests]

# cloud build trigger tasks. Task names must match with the trigger names in the GCP console

    backend-master:
        deps: [init, build-backend, unittests-backend]
        cmds:
            - task: push-backend

    backend-prod:
        deps: [build-backend, unittests-backend, end2end-tests]
        cmds:
            - task: push-backend

    frontend-master:
        deps: [build-frontend, unittests-frontend]
        cmds:
            - task: push-frontend

    frontend-prod:
        deps: [build-frontend, unittests-frontend, end2end-tests]
        cmds:
            - task: push-frontend

    tests-end2end-master:
        cmds:
            - task: end2end-tests

    tests-end2end-prod:
        cmds:
            - task: end2end-tests

    generate-testing:
        cmds:
            - task: generate-gcp

    generate-sadhguru:
        cmds:
            - task: generate-gcp

    generate-nithyananda:
        cmds:
            - task: generate-gcp

